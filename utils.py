# -*- coding: utf-8 -*-
import streamlit as st
from supabase import create_client
from datetime import datetime
import pytz

# üîå Conex√£o com Supabase
url = st.secrets["supabase"]["url"]
key = st.secrets["supabase"]["key"]
supabase = create_client(url, key)

# ‚úÖ Verifica√ß√£o de login
def verificar_login():
    if "usuario_id" not in st.session_state or not st.session_state["usuario_id"]:
        st.warning("Voc√™ precisa estar logado para acessar esta p√°gina.")
        st.stop()
    if "id_time" not in st.session_state or "nome_time" not in st.session_state:
        st.warning("Informa√ß√µes do time n√£o encontradas na sess√£o.")
        st.stop()

# üí∞ Registrar movimenta√ß√£o financeira com atualiza√ß√£o de saldo
def registrar_movimentacao(id_time, jogador, tipo, categoria, valor):
    """
    Registra movimenta√ß√µes financeiras e atualiza saldo do time.

    - tipo: Ex: "Transfer√™ncia", "Leil√£o", "Mercado"
    - categoria: "Compra" ou "Venda"
    - valor: sempre positivo

    A fun√ß√£o debita para 'compra' e credita para 'venda'.
    """
    try:
        # Buscar saldo atual do time
        res = supabase.table("times").select("saldo").eq("id", id_time).execute()
        if not res.data:
            st.error(f"‚ùå Time com ID {id_time} n√£o encontrado.")
            return

        saldo_atual = res.data[0]["saldo"]

        # Calcula novo saldo
        if categoria.lower() == "compra":
            novo_saldo = saldo_atual - valor
        elif categoria.lower() == "venda":
            novo_saldo = saldo_atual + valor
        else:
            st.warning("Categoria inv√°lida. Use 'compra' ou 'venda'.")
            return

        # Atualiza saldo no banco
        supabase.table("times").update({"saldo": novo_saldo}).eq("id", id_time).execute()

        # Pega data e hora no fuso de Bras√≠lia
        fuso_brasilia = pytz.timezone("America/Sao_Paulo")
        agora = datetime.now(fuso_brasilia).isoformat()

        # Registra movimenta√ß√£o
        registro = {
            "id_time": id_time,
            "jogador": jogador,
            "tipo": tipo,
            "categoria": categoria,
            "valor": valor,
            "data": agora
        }
        supabase.table("movimentacoes").insert(registro).execute()

    except Exception as e:
        st.error(f"‚ùå Erro ao registrar movimenta√ß√£o: {e}")
